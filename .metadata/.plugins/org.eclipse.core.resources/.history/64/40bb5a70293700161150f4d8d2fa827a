package views;

import model.Game;
import model.Player;
import model.Team;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.el.ELContext;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import org.primefaces.event.CellEditEvent;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.DualListModel;
import dataAccessLayer.GameDataAccess;
import dataAccessLayer.TeamDataAccess;
import helpers.PlayerHelper;
import helpers.RedirectView;
import helpers.TeamGenerator;

@ManagedBean(name = "nextGamesView")
@SessionScoped 
public class NextGamesView implements Serializable{

	    private static final long serialVersionUID = 1L;	
	    private final int MAXNUMBEROFPLAYERS=4;
	    public static List<Game> games;    
	    private Game selectedGame;    
	    private Date gameDate;
	    
	    public Game getSelectedGame() {
			return selectedGame;
		}

		public void setSelectedGame(Game selectedGame) {
			this.selectedGame = selectedGame;
		}
	    
	    public Date getGameDate() {
			return gameDate;
		}

		public void setGameDate(Date gameDate) {
			this.gameDate = gameDate;
		}

	    public List<Game> getGames() {
	        return games;
	    }
	    
	    public void setGames(List<Game> game) {
	        games=game;
	    }
	 		
		public void play(Game game) {
			ELContext elContext = FacesContext.getCurrentInstance().getELContext();
			LoginView firstBean = (LoginView) elContext.getELResolver().getValue(elContext, null, "loginView");
			
			String action=game.playUnplay(firstBean.getCurrentPlayer());
			if(action.compareTo("Play")==0)
			{
				if(game.getPlayers().size()>=MAXNUMBEROFPLAYERS)
				{
					GameDataAccess.AddWaitingPlayer(game.getId(), firstBean.getCurrentPlayer().getId());
					FacesContext.getCurrentInstance().addMessage(null,
							new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!","There are already "+MAXNUMBEROFPLAYERS+" players!"+game.dateToDisplay()));
				}
				else
				{
					firstBean.setCurrentPlayer(GameDataAccess.PlayGame(game.getId(), firstBean.getCurrentPlayer().getId()));
					this.generateTeams(game.getId());
					FacesContext.getCurrentInstance().addMessage(null,
							new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!","You are now playing on "+game.dateToDisplay()));
				}	
			}
			else
			{
				GameDataAccess.removePlayer(game.getId(), firstBean.currentPlayer.getId());
				Player nextPlayer=game.getFirstPlayerWaiting();
				if(nextPlayer.getId()!=null)
				{
					
				}
				System.out.println("Next player id: "+nextPlayer.getId());
				//GameDataAccess.PlayGame(game.getId(), firstBean.getCurrentPlayer().getId())
				FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!","Done! You are not playing anymore on  "+game.dateToDisplay()));
			}
			
			NextGamesView.games=GameDataAccess.listNextGames();
		}
		
		public void newGame()
		{
			Team first=TeamDataAccess.CreateNewTeam(new Team("First team"));
			Team second= TeamDataAccess.CreateNewTeam(new Team("Second team"));
			System.out.println("first id: "+first.getId()+" second : "+second.getId());
			
			try
			{
				SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
				System.out.println(	format.format(gameDate));
				Game gameToAdd=new Game(format.format(gameDate),first,second);
				games.add(GameDataAccess.AddNewGame(gameToAdd));
			    FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!", "New game on "+format.format(gameDate)));
			}
			catch(Exception ex)
			{
				System.out.println(ex.getMessage());
			}
		}
		 
		public void remove(Game game) {
			game.setArchive(true);
			GameDataAccess.addToArchive(game.getId());
			games.remove(game);
			FacesContext.getCurrentInstance().addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!", "Game successfully canceled! "));
		}
		
		public void teamsView(Game game)
		{
			Game selectGame=GameDataAccess.GetGame(game.getId());
			this.selectedGame=selectGame;
			ELContext context = FacesContext.getCurrentInstance().getELContext();
			LoginView loginBean = (LoginView) context.getELResolver().getValue(context, null, "loginView");
			TeamsView teamsBean = (TeamsView) context.getELResolver().getValue(context, null, "teamsView");
			WaitingPlayers waitToPlay=(WaitingPlayers)context.getELResolver().getValue(context, null, "waitingPlayers");
			teamsBean.setShowNextPrevious(false);
			
			if(selectGame.getPlayersWaiting()!=null)
			{
				waitToPlay.setPlayers(new ArrayList<Player>());
				waitToPlay.getPlayers().addAll(selectGame.getPlayersWaiting());
			}
			
			if(selectGame.getTeam1()!=null && selectGame.getTeam2()!=null)
			{
				System.out.println("Game has teams");
				teamsBean.setFirstTeam(selectGame.getTeam1());
				teamsBean.setSecondTeam(selectGame.getTeam2());
			}

			teamsBean.setPlayers( new DualListModel<>(new ArrayList<Player>(teamsBean.getFirstTeam().getPlayers()), new ArrayList<Player>(teamsBean.getSecondTeam().getPlayers())));
			RedirectView.Redirect(loginBean.getCurrentPlayer(),  "/resources/teamsuser.xhtml", "/resources/teamsadmin.xhtml");
		}

		public List<List<Player>> generateTeams(List<Player> players)
		{	
			List<List<Player>> list=new ArrayList<List<Player>>();
			
			TeamGenerator.list=players;
			TeamGenerator.generateTeams();
			TeamGenerator.printMap(TeamGenerator.map);
			Object key = TeamGenerator.map.keySet().toArray(new Object[TeamGenerator.map.size()])[0];
			
			List<Player> firstList = TeamGenerator.map.get(key);
			list.add(firstList);
			
			System.out.println("First team:");
			for(Player p:firstList)
			{
				System.out.println(p.getUsername());
			}
			
			List<Player> secondList = new ArrayList<Player>();
			
			
			//poate fi scoasa intr-o alta metoda in care dintr-o lista de jucatori elimin alta lista de jucatori
			boolean existsInList=false;
			for(Player p:players)
			{
				existsInList=false;
				
				for(Player pl:firstList)
				{
					if(p.getId()==pl.getId())
					{
						existsInList=true;
						break;
					}
				}
				if(!existsInList)
				{
					secondList.add(p);
				}
				
			}
			System.out.println("Second list:");
			for(Player p:secondList)
			{
				System.out.println(p.getUsername());
			}
			list.add(secondList);

			return list;
		}	
		
		
		public Game generateTeams(int gameId)
		{	
			Game game=GameDataAccess.GetGame(gameId);
	
			System.out.println(game.getPlayers());
			
			if(game.getPlayers().size()<4)
			{
				System.out.println("There are less then 4 players");
				for(Player player:game.getPlayers())
				{
					if(game.getTeam1().containsPlayer(player)==false)
					{
						game.setTeam1(TeamDataAccess.AddNewPlayer(game.getTeam1().getId(),player.getId()));
					}			
				}		
			}
			else
			{
				System.out.println("There are more than 4 players");
				TeamDataAccess.removeTeam(game.getTeam1().getId());
				TeamDataAccess.removeTeam(game.getTeam2().getId());
				TeamGenerator.list=new ArrayList<Player>(game.getPlayers());
				TeamGenerator.generateTeams();
				TeamGenerator.printMap(TeamGenerator.map);
				Object key = TeamGenerator.map.keySet().toArray(new Object[TeamGenerator.map.size()])[0];
				List<Player> firstList = TeamGenerator.map.get(key);
				System.out.println("First team: ");
				for(Player play:firstList)
				{
					System.out.println(play.getUsername());
					game.setTeam1(TeamDataAccess.AddNewPlayer(game.getTeam1().getId(),play.getId()));
				}
				
				System.out.println("Second team: ");
				for(Player play:game.getPlayers())
				{
					if(PlayerHelper.ExistsInList(play, firstList)==false)
					{
						System.out.println(play.getUsername());
						game.setTeam2(TeamDataAccess.AddNewPlayer(game.getTeam2().getId(),play.getId()));
					}
				}
			}

			System.out.println(game.dateToDisplay()+"first team: "+game.getTeam1().getName()+" second team: "+game.getTeam2().getName());

			game=GameDataAccess.UpdateGame(game);
			System.out.println(game.getTeam1().getPlayers().size());
			return game;
		}
		
		public void onCellEdit(CellEditEvent event) {
	        Object oldValue = event.getOldValue();
	        Object newValue = event.getNewValue();
	        GameDataAccess.SetDiff(Integer.parseInt(event.getRowKey()), Integer.parseInt(newValue.toString()));
	        if(newValue != null && !newValue.equals(oldValue)) {
	        FacesContext.getCurrentInstance().addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!", "Update difference from " + oldValue + " to " + newValue+"!"));
	        }
	    }
		
		public void onRowSelect(SelectEvent event) {
          this.selectedGame=(Game) event.getObject();
	    }
}