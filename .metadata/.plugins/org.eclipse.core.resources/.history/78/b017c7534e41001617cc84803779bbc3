package helpers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import model.Player;

/**
 * @author Paula
 *
 */
public class TeamGenerator {

	private double totalValue = 0;
	private TreeMap<Double, List<Player>> map;
	private List<List<Player>> resultList;
	private List<Player> list;

	/**
	 * @param inputList List of players that will be divided into two teams
	 */
	public TeamGenerator(List<Player> inputList) {
		if (inputList != null) {
			this.list = inputList;
		}
		this.resultList = new ArrayList<List<Player>>();

		this.generateTeams();
		this.printMap();
	}

	/**
	 * @param players
	 */
	private void GetTotalValue(List<Player> players) {
		for (Player p : players) {
			totalValue += p.getRating();
		}
		totalValue = totalValue / 2;
	}

	/**
	 * @param arr
	 * @param len
	 * @param startPosition
	 * @param result
	 */
	private void getCombinations(Player[] arr, int len, int startPosition, Player[] result) {

		if (len == 0) {
			resultList.add(Arrays.asList(result));
			List<Player> lisst = new ArrayList<Player>();
			for (Player p : Arrays.asList(result)) {
				lisst.add(p);
			}
			resultList.add(lisst);
			return;
		}
		for (int i = startPosition; i <= arr.length - len; i++) {
			result[result.length - len] = arr[i];
			getCombinations(arr, len - 1, i + 1, result);
		}
	}

	/**
	 * @return
	 */
	private TreeMap<Double, List<Player>> generateTeams() {
		Player[] array = new Player[list.size()];
		list.toArray(array);

		GetTotalValue(list);
		System.out.println("Total value" + totalValue);

		int nrOfPlayersForTeam = list.size() / 2;
		getCombinations(array, nrOfPlayersForTeam, 0, new Player[nrOfPlayersForTeam]);

		map = new TreeMap<Double, List<Player>>(new MapComparator(totalValue));
		double idealValue = 0;

		for (List<Player> list : resultList) {
			idealValue = 0;
			for (Player p : list) {
				idealValue += p.getRating();
			}
			map.put(idealValue, list);
		}
		return map;
	}

	/**
	 * @return
	 */
	public List<Player> GetBestTeam() {
		Object key = this.map.keySet().toArray(new Object[this.map.size()])[0];
		return this.map.get(key);
	}

	/**
	 * 
	 */
	public void printMap() {
		System.out.println("Valoare ideala a unei echipe: " + this.totalValue);
		System.out.println("Echipele sortate crescator in functie de 'echilibrul' obtinut sunt:");
		for (Map.Entry<Double, List<Player>> entry : map.entrySet()) {

			System.out.print(" Echipa: ");
			for (Player p : entry.getValue()) {
				System.out.print(p.getUsername() + " ");
			}

			System.out.print(" Diff : " + Math.abs(entry.getKey() - totalValue));
			System.out.print(" Suma rating-urilor : " + entry.getKey());
			System.out.println();
		}
	}
}
