package views;

import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

import org.primefaces.model.DualListModel;

import dataAccessLayer.GameDataAccess;
import dataAccessLayer.PlayerDataAccess;
import dataAccessLayer.TeamDataAccess;
import helpers.DatabaseConnection;
import helpers.RatingComparator;
import helpers.RedirectView;
import model.Game;
import model.Player;

@ManagedBean(name = "userView")
@SessionScoped
public class UserView {
	private Game nextGame;
	private Game lastGame;
	private Player lastAddedPlayer;
	private boolean disabled;
	
	@PostConstruct
	public void init() {
		this.nextGame=new Game();
		this.lastAddedPlayer=new Player();
		this.lastGame=new Game();
		this.enabled=true;
	}

	public Game getNextGame() {
		return nextGame;
	}

	public void setNextGame(Game nextGame) {
		this.nextGame = nextGame;
	}

	public Game getLastGame() {
		return lastGame;
	}

	public void setLastGame(Game lastGame) {
		this.lastGame = lastGame;
	}

	public Player getLastAddedPlayer() {
		return lastAddedPlayer;
	}

	public void setLastAddedPlayer(Player lastAddedPlayer) {
		this.lastAddedPlayer = lastAddedPlayer;
	}
	
	public String getNextGameMessage()
	{
		ELContext context = FacesContext.getCurrentInstance().getELContext();
		LoginView loginBean = (LoginView) context.getELResolver().getValue(context, null, "loginView");
		System.out.println(loginBean.getCurrentPlayer().getUsername());
		loginBean.setCurrentPlayer(PlayerDataAccess.FindPlayer(loginBean.getCurrentPlayer().getId()));
     	Game game=loginBean.getCurrentPlayer().NextPlayedGame();
		if(game!=null)
		{
			this.nextGame=game;
			this.enabled=true;
			return "You are playing on "+game.dateToDisplay();
		}
		else
		{
			game=GetFirstNextGame();
			if(game==null)
			{
				this.enabled=false;
				return "No next games!";		
			}
			else
			{
				this.nextGame=game;
				this.enabled=true;
				return "Next game is on "+game.dateToDisplay();			
			}			
		}
	}
	
	public String getLastGameMessage()
	{
		ELContext context = FacesContext.getCurrentInstance().getELContext();
		LoginView loginBean = (LoginView) context.getELResolver().getValue(context, null, "loginView");
		System.out.println(loginBean.getCurrentPlayer().getUsername());
		loginBean.setCurrentPlayer(PlayerDataAccess.FindPlayer(loginBean.getCurrentPlayer().getId()));
		Game game=loginBean.getCurrentPlayer().LastPlayedGame();
		if(game!=null)
		{
			this.lastGame=game;
			return "You played on "+this.lastGame.dateToDisplay();
		}
		else
		{
			return "You have not played any game yet!";		 
		}
	}
	
	public void viewTeams()
	{
		ELContext context = FacesContext.getCurrentInstance().getELContext();
		TeamsView teamsBean = (TeamsView) context.getELResolver().getValue(context, null, "teamsView");
		WaitingPlayers waitToPlay=(WaitingPlayers)context.getELResolver().getValue(context, null, "waitingPlayers");
		teamsBean.setShowNextPrevious(false);
		if(this.lastGame!=null)
		{
			teamsBean.setGame(this.lastGame);
		}
		if(this.lastGame.getPlayersWaiting()!=null)
		{
			waitToPlay.setPlayers(new ArrayList<Player>());
			waitToPlay.getPlayers().addAll(this.lastGame.getPlayersWaiting());
		}
		teamsBean.setPlayers( new DualListModel<>(new ArrayList<Player>(this.lastGame.getTeam1().getPlayers()), new ArrayList<Player>(this.lastGame.getTeam2().getPlayers())));
		RedirectView.Redirect("/resources/historyteams.xhtml");
	}
	
	public String getMessageForPlayer()
	{
		Player player=LastAddedPlayer();
		if(player==null)
		{
			return "No new players!";
		}
		else
		{
			this.lastAddedPlayer=player;
			return this.lastAddedPlayer.getUsername()+" recenty subscribed!";
		}
	}
	
	public  Player LastAddedPlayer() {	
		List<Player> listOfPlayers=PlayerDataAccess.ListActivePlayers();
		List<Player> recentPlayers=new ArrayList<Player>();
		if(listOfPlayers!=null)
		{
			for(Player p:listOfPlayers)
			{
				if(p.getPlayerRatings()!=null && p.getPlayerRatings().size()==1)
				{
					recentPlayers.add(p);
				}
			}
		}
		for(Player p:recentPlayers)
		{
			System.out.println(p.toString());
		}
		Player result=null;
		if(recentPlayers.size()!=0)
		{
			result=recentPlayers.get(0);
			long days=getDiffBetweenDates(result.getPlayerRatings().get(0).getDate(),new Date());
			for(Player p:recentPlayers)
			{
				long dayss=getDiffBetweenDates(p.getPlayerRatings().get(0).getDate(),new Date());
				if(dayss<days)
				{
					result=p;
				}
			}
		}
		return result;
    }
	
	private List<Player> TopPlayers(int number)
	{
		List<Player> listOfPlayers=PlayerDataAccess.ListActivePlayers();
		if(listOfPlayers!=null)
		{
			listOfPlayers.sort(new RatingComparator());	
			Collections.reverse(listOfPlayers);
			if(listOfPlayers.size()>number)
			{
				return listOfPlayers.subList(0, number);
			}
		}
		return listOfPlayers;
	}
	
	public void redirectToPlayers(ActionEvent actionEvent)
	{
		System.out.println("Hello from redirect to players!");
		ELContext context = FacesContext.getCurrentInstance().getELContext();
		PlayersView playersView= (PlayersView) context.getELResolver().getValue(context, null, "playersView");
		LoginView loginBean = (LoginView) context.getELResolver().getValue(context, null, "loginView");
		playersView.setPlayers(TopPlayers(5));
		RedirectView.Redirect(loginBean.getCurrentPlayer(), "/resources/viewplayers.xhtml", "/resources/adminplayersview.xhtml");	
	
	}
	
	public static void main(String[] args) {
//		List<Player> list=TopPlayers(4);
//		for(Player p:list)
//		{
//			System.out.println(p.toString());
//		}
	}
	
	private  long getDiffBetweenDates(Date date1,Date date2)
	{
		  long startDate = date1.getTime();
		  long endDate =date2.getTime();
		  long diffTime = Math.abs(startDate - endDate);
		  long diffDays = diffTime / (1000 * 60 * 60 * 24);
		  return diffDays;
	}
	
	public Game GetFirstNextGame()
	{
		Game game=null;
		List<Game> listOfGames=GameDataAccess.ListNextGames();
		if(listOfGames!=null && listOfGames.size()!=0)
		{
			System.out.println("There are next games");
			game=listOfGames.get(0);
			for(Game item:listOfGames)
			{
				if(item.getDate().before(game.getDate()))
				{
					game=item;
				}
			}
		}
		return game;	
	}
	
	public void teamsView()
	{
		ELContext context = FacesContext.getCurrentInstance().getELContext();
		TeamsView teamsBean = (TeamsView) context.getELResolver().getValue(context, null, "teamsView");
		WaitingPlayers waitToPlay=(WaitingPlayers)context.getELResolver().getValue(context, null, "waitingPlayers");
		teamsBean.setShowNextPrevious(false);
		if(this.nextGame!=null)
		{
			teamsBean.setGame(this.nextGame);
		}
		if(this.nextGame.getPlayersWaiting()!=null)
		{
			waitToPlay.setPlayers(new ArrayList<Player>());
			waitToPlay.getPlayers().addAll(this.nextGame.getPlayersWaiting());
		}
		teamsBean.setPlayers( new DualListModel<>(new ArrayList<Player>(this.nextGame.getTeam1().getPlayers()), new ArrayList<Player>(this.nextGame.getTeam2().getPlayers())));
		RedirectView.Redirect("/resources/teams.xhtml");
	}
	
	public void play() {
		ELContext elContext = FacesContext.getCurrentInstance().getELContext();
		NextGamesView nextGamesBean=(NextGamesView) elContext.getELResolver().getValue(elContext, null, "nextGamesView");
		nextGamesBean.play(this.nextGame);
		getNextGameMessage();
	}
}
