package views;
import model.Game;
import model.Player;
import model.Team;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.el.ELContext;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import org.primefaces.model.DualListModel;
import dataAccessLayer.GameDataAccess;
import dataAccessLayer.TeamGenerator;

@ManagedBean(name = "nextGamesView")
@SessionScoped
public class NextGamesView implements Serializable{

	 private static final long serialVersionUID = 1L;

	 
	    public static List<Game> games;
	    
	    private Date gameDate;
	    
	    public Date getGameDate() {
			return gameDate;
		}

		public void setGameDate(Date gameDate) {
			this.gameDate = gameDate;
		}

		@ManagedProperty("#{gameDataAccess}")
	    public GameDataAccess gamesData;

	    public List<Game> getGames() {
	        return games;
	    }
	    
	    public void setGames(List<Game> game) {
	        games=game;
	    }
	 
		public GameDataAccess getGamesData() {
			return gamesData;
		}

		public void setGamesData(GameDataAccess gamesData) {
			this.gamesData = gamesData;
		}
		
		public void play(Game game) {
			System.out.println("PlayGame!");
			ELContext elContext = FacesContext.getCurrentInstance().getELContext();
			LoginView firstBean = (LoginView) elContext.getELResolver().getValue(elContext, null, "loginView");
			FacesContext.getCurrentInstance().addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_WARN, "INFO!", GameDataAccess.playGame(game.getId(), firstBean.getCurrentPlayer().getId())));
			System.out.println("Done");
		}
		
		public void addResult(Game game) {
		
			System.out.println("show");
			ELContext elContext = FacesContext.getCurrentInstance().getELContext();
			TeamsView firstBean = (TeamsView) elContext.getELResolver().getValue(elContext, null, "teamsView");
			
			
			System.out.println("Winners:");
			Team winnersTeam=new Team();
			for(Player p:firstBean.themesSource)
			{
				System.out.println(p.getUsername());
				//winnersTeam.getPlayers().addAll(firstBean.themesSource);
			}
			winnersTeam.getPlayers().addAll(firstBean.themesSource);
			
			Team loserTeam=new Team();
			System.out.println("Losers:");
			
			for(Player p:firstBean.themesTarget)
			{	
				System.out.println(p.getUsername());
			}
			loserTeam.getPlayers().addAll(firstBean.themesTarget);
			
			//game.addTeam(winnersTeam);
			//game.addTeam(loserTeam);
			
			System.out.println("Game: "+game.dateToDisplay()+" difference "+game.getDifference());
			//GameDataAccess.setDifference(this.selectedGame.getId(),this.selectedGame.getDifference(),winnersTeam,loserTeam);
		}
			
		public void newGame()
		{
			System.out.println("New game");
			GameDataAccess gda=new GameDataAccess();
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
			System.out.println(	format.format(gameDate));
		    gda.addNewGame(format.format(gameDate));
		    this.setGames(GameDataAccess.listNextGames());
			System.out.println("Done!");
		}
		 
		public void remove(Game game) {
			System.out.println("Remove game "+game.getId());
			game.setArchive(true);
			GameDataAccess.addToArchive(game.getId());
			games.remove(game);
		}
		
		public void teamsView(Game game)
		{
			System.out.println("View teams method!");
			Game selectedGame=GameDataAccess.GetGame(game.getId());
			
			if(selectedGame.getTeam1()!=null && selectedGame.getTeam2()!=null)
			{
				System.out.println("Game has teams!");
				System.out.println("Team one:"+selectedGame.getTeam1().getName()+" has "+selectedGame.getTeam1().getPlayers().size() );
				
				System.out.println("Second team:"+selectedGame.getTeam1().getName()+" has "+selectedGame.getTeam1().getPlayers().size() );
			}
		}
		
		public void viewTeams(Game game)
		{		
			System.out.println("View teams method!");
        	//this.setSelectedGame(game);

			ELContext context = FacesContext.getCurrentInstance().getELContext();
			LoginView firstBean = (LoginView) context.getELResolver().getValue(context, null, "loginView");
			firstBean.setClick(false);
	
			TeamsView teamsBean = (TeamsView) context.getELResolver().getValue(context, null, "teamsView");

			if(game.getTeam1()!=null && game.getTeam2()!=null)
			{
				System.out.println("Game has teams!");
				
				teamsBean.themesSource=new ArrayList<Player>();
				teamsBean.themesTarget=new ArrayList<Player>();

				System.out.println("Team one:"+game.getTeam1().getName());
				for(Player p:game.getTeam1().getPlayers())
				{
					System.out.println(p.toString());
				}
				//teamsBean.themesSource.addAll(this.selectedGame.getTeam1().getPlayers());

				System.out.println("Second team:"+game.getTeam2().getName());
				for(Player p:game.getTeam2().getPlayers())
				{
					System.out.println(p.toString());
				}
				//teamsBean.themesTarget.addAll(this.selectedGame.getTeam2().getPlayers());
				
				teamsBean.setPlayers( new DualListModel<>(teamsBean.themesSource, teamsBean.themesTarget));
			}
//			else
//			{
//				System.out.println("Game has no teams!");
//				if(!this.selectedGame.getPlayers().isEmpty())
//				{
//					teamsBean.setExistTeams(true);
//					System.out.println("This game has players subscribed!");
//					if(this.selectedGame.getPlayers().size()<=3)
//					{
//						teamsBean.themesSource.removeAll(teamsBean.themesSource);
//						teamsBean.themesSource.addAll(this.selectedGame.getPlayers());
//						teamsBean.themesTarget.removeAll(teamsBean.themesTarget);
//						teamsBean.setFirstTeamName("First team");
//						teamsBean.setSecondTeamName("Second team");
//						teamsBean.setPlayers( new DualListModel<>(teamsBean.themesSource, teamsBean.themesTarget));
//					}
//					else
//					{
//						teamsBean.setShowNextPrevious(true);
//						List<Player> list=new ArrayList<Player>();
//						
//						for(Player player:this.selectedGame.getPlayers())
//						{
//							list.add(player);
//						}
//						List<List<Player>> listed=this.generateTeams(list);
//						
//						for(List<Player> l:listed)
//						{
//							System.out.println("Team");
//							for(Player p:l)
//							{
//								System.out.println(p.toString());
//							}
//						}
//						teamsBean.themesSource=listed.get(0);
//						teamsBean.themesTarget=listed.get(1);
//						teamsBean.setPlayers( new DualListModel<>(teamsBean.themesSource, teamsBean.themesTarget));
//					}
//				}
//				else
//				{
//					System.out.println("This game has no players subscribed!");
//					teamsBean.setExistTeams(false);
//					System.out.println("This game has no game players");
//					teamsBean.setExistTeams(false);
//					teamsBean.themesSource.removeAll(teamsBean.themesSource);
//					teamsBean.themesTarget.removeAll(teamsBean.themesTarget);
//					teamsBean.setPlayers( new DualListModel<>(teamsBean.themesSource, teamsBean.themesTarget));
//				}
//			}
			
			RedirectView.Redirect(firstBean.getCurrentPlayer(),  "/faces/resources/teamsuser.xhtml", "/faces/resources/teamsadmin.xhtml");
		}

		public List<List<Player>> generateTeams(List<Player> players)
		{	
			List<List<Player>> list=new ArrayList<List<Player>>();
			TeamGenerator.list=players;
			TeamGenerator.generateTeams();
			TeamGenerator.printMap(TeamGenerator.map);
			Object key = TeamGenerator.map.keySet().toArray(new Object[TeamGenerator.map.size()])[0];
			
			List<Player> firstList = TeamGenerator.map.get(key);
			list.add(firstList);
			
			
			System.out.println("First team:");
			for(Player p:firstList)
			{
				System.out.println(p.getUsername());
			}
			
			List<Player> secondList = new ArrayList<Player>();
			
			//poate fi scoasa intr-o alta metoda in care dintr-o lista de jucatori elimin alta lista de jucatori
			boolean existsInList=false;
			for(Player p:players)
			{
				existsInList=false;
				
				for(Player pl:firstList)
				{
					if(p.getId()==pl.getId())
					{
						existsInList=true;
						break;
					}
				}
				if(!existsInList)
				{
					secondList.add(p);
				}
				
			}
			System.out.println("Second list:");
			for(Player p:secondList)
			{
				System.out.println(p.getUsername());
			}
			list.add(secondList);

			return list;
		}		
}