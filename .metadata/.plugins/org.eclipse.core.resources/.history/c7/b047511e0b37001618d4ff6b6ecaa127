package model;

import java.io.Serializable;
import java.text.SimpleDateFormat;
import javax.persistence.*;
import model.Player;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * The persistent class for the games database table.
 * 
 */
@Entity
@Table(name="game")
@NamedQuery(name="Game.findAll", query="SELECT g FROM Game g")
public class Game implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Integer id;

	@Temporal(TemporalType.DATE)
	private Date date;

	private Integer difference;

	private Boolean archive;

	//uni-directional many-to-many association to Player
	@ManyToMany(fetch=FetchType.EAGER)
	@JoinTable(name="game_player", 
    joinColumns={@JoinColumn(name="game_id")}, 
    inverseJoinColumns={@JoinColumn(name="player_id")})
	private Set<Player> players;

	//bi-directional many-to-many association to Player
	@ManyToMany(fetch=FetchType.EAGER)
	@JoinTable(name="players_waiting", 
    joinColumns={@JoinColumn(name="game_id")}, 
    inverseJoinColumns={@JoinColumn(name="player_id")})
	private Set<Player> playersWaiting;
		
	public Set<Player> getPlayersWaiting() {
		return playersWaiting;
	}

	public void setPlayersWaiting(Set<Player> playersWaiting) {
		this.playersWaiting = playersWaiting;
	}

	public Game() {
		this.date=null;
		this.difference=0;
		this.players=new HashSet<Player>();
		this.team1=new Team();
		this.team2=new Team();
	}

	public Game(String date, Team firstTeam, Team secondTeam)
	{
		this();
		this.team1=firstTeam;
		this.team2=secondTeam;
		SimpleDateFormat dt = new SimpleDateFormat("yyyy-MM-dd"); 
		this.date=dt.parse(date); 
	}
	
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public Date getDate() {
		return this.date;
	}

	public void setDate(Date date) {
		this.date = date;
	}

	public Integer getDifference() {
		return this.difference;
	}

	public void setDifference(Integer difference) {
		this.difference = difference;
	}

	//bi-directional many-to-one association to Team
	@OneToOne
	@JoinColumn(name="firstteam")
	private Team team1;

		//bi-directional many-to-one association to Team
	@OneToOne
	@JoinColumn(name="secondteam")
	private Team team2;
		
	public Set<Player> getPlayers() {
		return this.players;
	}

	public void setPlayers(Set<Player> players) {
		this.players = players;
	}

	public Team getTeam1() {
		return this.team1;
	}

	public void setTeam1(Team team1) {
		this.team1 = team1;
	}

	public Team getTeam2() {
		return this.team2;
	}

	public void setTeam2(Team team2) {
		this.team2 = team2;
	}
	
	public Boolean getArchive() {
		return this.archive;
	}

	public void setArchive(Boolean archive) {
		this.archive = archive;
	}

	public void addPlayer(Player player)
	{
		this.players.add(player);
	}
	
	public boolean gameStatus(Player player)
	{
		if(this.players!=null)
		{
			for(Player gamePlayer:this.players)
			{
				
				int a=gamePlayer.getId();
				int b=player.getId();
				if(a==b)
				{
					return true;
				}
			}
		}
		return false;
	}
	
	public boolean hasTeams()
	{
		if(this.team1!=null && this.team2!=null)
			return true;
		return false;
	}
	
	public String dateToDisplay()
	{
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		return format.format(this.date);
	}
}