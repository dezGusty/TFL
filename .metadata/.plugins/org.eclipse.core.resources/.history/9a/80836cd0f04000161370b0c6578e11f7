package views;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import org.primefaces.event.TransferEvent;
import org.primefaces.model.DualListModel;
import dataAccessLayer.GameDataAccess;
import dataAccessLayer.PlayerDataAccess;
import dataAccessLayer.PlayerRatingAccess;
import dataAccessLayer.TeamDataAccess;
import model.Game;
import model.Player;
import model.PlayerRating;
import model.Team;

@ManagedBean(name = "teamsView")
@SessionScoped
public class TeamsView implements Serializable {

	/**
	* 
	*/
	private static final long serialVersionUID = 1L;
	private Game game;
	private DualListModel<Player> players;

	public Game getGame() {
		return game;
	}

	public void setGame(Game game) {
		this.game = game;
	}

	@PostConstruct
	public void init() {
		if(players==null)
		{
			players=new DualListModel<Player>();
		}	
		this.game=new Game();
	}

	public DualListModel<Player> getPlayers() {
		return players;
	}

	public void setPlayers(DualListModel<Player> players) {
		this.players = players;
	}

	public void onTransfer(TransferEvent event) {
		this.game.getTeam1().setPlayers( new HashSet<Player>(this.players.getSource()));
		this.game.getTeam2().setPlayers( new HashSet<Player>(this.players.getTarget()));
	}
	
	 public void saveTeams() {

		this.game.setTeam1(TeamDataAccess.SaveTeamName(this.game.getTeam1().getId(), this.game.getTeam1().getName()));
		this.game.setTeam2(TeamDataAccess.SaveTeamName(this.game.getTeam2().getId(), this.game.getTeam2().getName()));

     	TeamDataAccess.RemoveAllPlayers(this.game.getTeam1().getId());
		TeamDataAccess.RemoveAllPlayers(this.game.getTeam2().getId());
		for(Player play: this.players.getSource())
		{
			game.setTeam1(TeamDataAccess.AddNewPlayer(game.getTeam1().getId(),play.getId()));
		}
		for(Player play: this.players.getTarget())
		{
			game.setTeam2(TeamDataAccess.AddNewPlayer(game.getTeam2().getId(),play.getId()));
		}
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage(FacesMessage.SEVERITY_INFO, null,"Teams updated successfully!"));
	 }
	 
	 public void saveTeamsResult() {
		 
		 int difference=Math.abs(this.game.getTeam1().getGoals()-this.game.getTeam2().getGoals());
		 this.game=GameDataAccess.SetDifference(this.game.getId(), difference);
		 FacesContext.getCurrentInstance().addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, null,"Game difference setted: !"+difference));
		 
		 this.game.getTeam1().getPlayers().removeAll(this.game.getTeam1().getPlayers());
		 this.game.getTeam2().getPlayers().removeAll(this.game.getTeam2().getPlayers());
		 this.game.getTeam1().setScore(0);
		 this.game.getTeam2().setScore(0);
		 System.out.println("first team players"+this.game.getTeam1().getPlayers()+ "team rating: "+this.game.getTeam1().getScore());
		 System.out.println("second team players "+this.game.getTeam2().getPlayers()+"team rating: "+this.game.getTeam2().getScore());
		 if(game.getTeam1().getGoals()>game.getTeam2().getGoals())
		 {
			 game.getTeam1().setWinner(true);
			 game.getTeam2().setWinner(false);
			 FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_INFO, null,"FirstTeam won!"));
		 }
		 else
			 if(game.getTeam2().getGoals()>game.getTeam1().getGoals())
			 {
				 game.getTeam2().setWinner(true);
				 game.getTeam1().setWinner(false);
				 FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_INFO, null,"Secondteam won!"));
				 
			 }
		 
		 for(Player play: this.players.getSource())
		 {
			this.game.setTeam1(TeamDataAccess.AddNewPlayer(this.game.getTeam1().getId(), play.getId()));
		 }
		 for(Player play: this.players.getTarget())
		 {
			 this.game.setTeam2(TeamDataAccess.AddNewPlayer(this.game.getTeam2().getId(), play.getId()));
		 }
		 System.out.println("first team players"+this.game.getTeam1().getPlayers()+ "team rating: "+this.game.getTeam1().getScore());
		 System.out.println("second team players "+this.game.getTeam2().getPlayers()+"team rating: "+this.game.getTeam1().getScore());
		 UpdateRatingsForGame(this.game.getId());
		 UpdateRatingsForGame(this.game.getId());
	 } 
	 
	 public void UpdateRatingForEachPlayer(int playerId, Game game)
	 {
		  Player p=PlayerDataAccess.FindPlayer(playerId);
		 // Game ga=GameDataAccess.GetGame(gameId);
//		  
//		  if(PlayerDataAccess.DeleteRatingsBeforeGame(playerId, game.getId()))
//		  {
//			  p=PlayerDataAccess.UpdateLastValidRating(playerId);
//			  System.out.println("Ratings deleted successfully");
//			  System.out.println("last rating is: "+p.getRating());
//			  p=PlayerDataAccess.NewRatingForGame(playerId, game.getId());
//			  PlayerRating newRating=new PlayerRating(game.getDate(),p,p.getRating());
//			  for(Game ga:p.getGames())
//			  {
//				  PlayerRatingAccess.RegisterNewRating(newRating);
//				  if(ga.getDate().after(game.getDate()))
//				  {
//					  p=PlayerDataAccess.NewRatingForGame(p.getId(), game.getId());
//					  System.out.println("After new rating for game: "+p.getRating());
//					  PlayerRating newwRating=new PlayerRating(game.getDate(),p,p.getRating());
//					  PlayerRatingAccess.RegisterNewRating(newwRating);
//				  }
//			  }
//		  }
//		  else
//		  {
//			  System.out.println("No ratings were deleted");
//			  p=PlayerDataAccess.NewRatingForGame(playerId, game.getId());
//			  PlayerRating newRating=new PlayerRating(game.getDate(),p,p.getRating());
//			  PlayerRatingAccess.RegisterNewRating(newRating);
//		  }	  
//		  System.out.println("new rating: "+p.getRating());
		  
	 }
	 
	 public void UpdateRatingsForGame(int gameId)
	 {	
		 Game g=GameDataAccess.GetGame(gameId);
		 System.out.println("Will be updated for diff: "+g.getDifference());
         if(g.getPlayers()!=null)
         {
        	 for(Player p:g.getPlayers())
    		 {
        		 System.out.println("Rating updated for player: "+p.toString());
    			 System.out.println(p.getPlayerRatings());
    			 if(p.hasRatingForGame(g))
    			 {
    				 System.out.println("Already has rating for game: "+g.getDate());
    				 double lastRating=p.getRatingBefore(g);
    				 System.out.println("Rating before this game" +p.getRatingBefore(g));
    				 System.out.println("Rating id to update: "+p.getRatingForGame(g).getId());
    				 ActualizareRating(g.getId(), p.getId(), lastRating);	
    			 }
    			 else
    			 {
    				 System.out.println("Has no rating for game: "+g.getDate());
    				 PlayerRating rating=new PlayerRating(game.getDate(),p,p.getRating());
    				 PlayerRatingAccess.RegisterNewRating(rating);
    			 }	 
    			 UpdateRatingForNextGames(p.getId(), game);
    		 }
         }
	 }

private void UpdateRatingForNextGames(int playerId, Game game)
{
	Player p=PlayerDataAccess.FindPlayer(playerId);
	for(Game playerGame:p.getGames()))
	 {
		
		 if(playerGame.getDate().after(game.getDate()))
		 {
			 System.out.println("game after: "+playerGame.toString());
			 if(p.hasRatingForGame(playerGame))
			 {
				 double lastRating=p.getRatingBefore(playerGame);
				 System.out.println(lastRating);
				 ActualizareRating(game.getId(), p.getId(), lastRating);	
			 }
		 }
	 }
}

private void ActualizareRating(int gameId, int playerId, double oldRating)
{
	Game game=GameDataAccess.GetGame(gameId);
	Player player=PlayerDataAccess.FindPlayer(playerId);
	double newRating=0;
	if(game.getTeam1().containsPlayer(player))
	{
			if(game.getTeam1().getWinner())
			{
				//p.setRating(p.getRating()+(game.getDifference()*0.01));
				newRating=oldRating+(0.01*game.getDifference());
			    System.out.println("Rating updated from "+oldRating+"to "+newRating);
			}
			else
			{
				//p.setRating(p.getRating()-(game.getDifference()*0.01));
				newRating=oldRating-(0.01*game.getDifference());
				System.out.println("Rating updated from "+oldRating+"to "+newRating);
			}
	}
	else
	{
			if(game.getTeam2().containsPlayer(player))
			{
				if(game.getTeam2().getWinner())
				{
					//p.setRating(p.getRating()+(game.getDifference()*0.01));
					newRating=oldRating+(0.01*game.getDifference());
 					System.out.println("Rating updated from "+oldRating+"to "+newRating);
				}
				else
				{
					//p.setRating(p.getRating()-(game.getDifference()*0.01));
					newRating=oldRating-(0.01*game.getDifference());
 					System.out.println("Rating updated from "+oldRating+"to "+newRating);
				}
			}
 		}
	PlayerRatingAccess.UpdateRating(player.getRatingForGame(game).getId(), newRating);	
	PlayerDataAccess.UpdateRating(playerId, newRating);
}
}
		
//			 p=PlayerDataAccess.DeleteRatingsBeforeGame(p.getId(), g.getId());
//			 System.out.println("Ratings deleted successfully if there were");
//			 p=PlayerDataAccess.NewRatingForGame(p.getId(),g.getId());
//			 PlayerRating newRating=new PlayerRating(g.getDate(),p,p.getRating());
//			 PlayerRatingAccess.RegisterNewRating(newRating); 
//			 for(Game ga:p.getGames())
//			  {
//				  if(ga.getDate().after(g.getDate()))
//				  {
//					  System.out.println(ga.getDate()+" is after: "+g.getDate());
//					  PlayerDataAccess.NewRatingForGame(p.getId(),ga.getId());
//					  newRating=new PlayerRating(ga.getDate(),p,p.getRating());
//					  PlayerRatingAccess.RegisterNewRating(newRating); 
//				  }
//			  }
