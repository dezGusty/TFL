package views;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;

import org.primefaces.event.TransferEvent;
import org.primefaces.model.DualListModel;

import dataAccessLayer.PlayerDataAccess;
import model.Player;

@ManagedBean(name = "teamsView")
@ViewScoped
public class TeamsView {

	     
	    @ManagedProperty("#{themeService}")
	    private PlayerDataAccess service;

	    private DualListModel<Player> players;
	     
	    @PostConstruct
	    public void init() {
	        //Cities
	        List<String> citiesSource = new ArrayList<String>();
	        List<String> citiesTarget = new ArrayList<String>();
	         
	        citiesSource.add("San Francisco");
	        citiesSource.add("London");
	        citiesSource.add("Paris");
	        citiesSource.add("Istanbul");
	        citiesSource.add("Berlin");
	        citiesSource.add("Barcelona");
	        citiesSource.add("Rome");
	         
	        cities = new DualListModel<String>(citiesSource, citiesTarget);
	         
	        //Themes
	        List<Theme> themesSource = service.getThemes().subList(0, 5);
	        List<Theme> themesTarget = new ArrayList<Theme>();
	         
	        themes = new DualListModel<Theme>(themesSource, themesTarget);
	         
	    }
	 
	    public PlayerDataAccess getService() {
	        return service;
	    }
	 
	    public void setService(PlayerDataAccess service) {
	        this.service = service;
	    }
	 
	    public DualListModel<Player> getThemes() {
	        return players;
	    }
	 
	    public void setThemes(DualListModel<Player> themes) {
	        this.players = themes;
	    }
	     
	    public void onTransfer(TransferEvent event) {
	        StringBuilder builder = new StringBuilder();
	        for(Object item : event.getItems()) {
	            builder.append(((Player) item).getUsername()).append("<br />");
	        }
	         
	        FacesMessage msg = new FacesMessage();
	        msg.setSeverity(FacesMessage.SEVERITY_INFO);
	        msg.setSummary("Items Transferred");
	        msg.setDetail(builder.toString());
	         
	        FacesContext.getCurrentInstance().addMessage(null, msg);
	    } 
	 
	    public void onSelect(SelectEvent event) {
	        FacesContext context = FacesContext.getCurrentInstance();
	        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Item Selected", event.getObject().toString()));
	    }
	     
	    public void onUnselect(UnselectEvent event) {
	        FacesContext context = FacesContext.getCurrentInstance();
	        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Item Unselected", event.getObject().toString()));
	    }
	     
	    public void onReorder() {
	        FacesContext context = FacesContext.getCurrentInstance();
	        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "List Reordered", null));
	    } 
	
}
