package dataAccessLayer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import model.Player;

public class TeamGenerator {

	public static int factorial(int number)
	{
		int result=1;
		for(int i=1;i<=number;i++)
		{
			result*=i;
		}
		return result;
	}
	
	public static int Combination(int n,int k)
	{
		return factorial(n)/(factorial(k)*factorial(n-k));
	}
	
    
	public static List<List<Player>> resultList=new ArrayList<List<Player>>();
	
	static int totalValue=0;
	
	public static void ListCombinations()
	{
		System.out.println("There are "+resultList.size()+" teams");
		 for(List<Player> l:resultList)
		 {
			 for(Player p:l)
			 {
				 System.out.println(p.getUsername());
			 }
		 }
	}
	
	public static void GetTotalValue(List<Player> players)
	{
			 for(Player p:players)
			 {
				 totalValue+=p.getRating();
				 System.out.println(p.getUsername());
			 }
			 
	}
	
    public static void  getCombinations(Player[] arr, int len, int startPosition, Player[] result){
    		  
        if (len == 0){
        	
        	resultList.add(Arrays.asList(result));
        	
        	//System.out.println("Team");
        	
        	List<Player> lisst=new ArrayList<Player>();
        	for(Player p:Arrays.asList(result))
        	{
        		lisst.add(p);
        		//System.out.println(p.getUsername());
        	}
        	resultList.add(lisst);
            return;
        }            
        for (int i = startPosition; i <= arr.length-len; i++){
            result[result.length - len] = arr[i];
            getCombinations(arr, len-1, i+1, result);
        }
    }  

    
	public static  Map<Double,List<Player>> generateTeams()
	{
		//lista care va fi returnata
		 Map<Double,List<Player>> map = new HashMap<Double,List<Player>>();
		 
		 //valoarea totala a echipei
		 double idealValue=0;
		 
		 for(List<Player> list:resultList)
	        {
			 	idealValue=0;
	        	System.out.println("combination:");
	        	for(Player p:list)
	        	{
	        		idealValue+=p.getRating();
	        		System.out.println(p.getUsername());
	        	}
	        	map.put(idealValue, list);
	        	System.out.println("Strength "+idealValue);
	        }
		 return map;
		
	}
	
	public static void main(String[] args) {
		//fac un ob player data access
		PlayerDataAccess pda=new PlayerDataAccess();
		List<Player> list=new ArrayList<Player>();
		list=pda.listPlayers();
		//transform lista in array
		Player[] array = new Player[list.size()];
		list.toArray(array); 
		
		GetTotalValue(list);
		System.out.println("Total value" +totalValue);
		//generez toate perechile posibile
		getCombinations(array, 3, 0,new Player[3]);
		
		ListCombinations();
		
		 Map<Double,List<Player>> map = new HashMap<Double,List<Player>>();
		 map=generateTeams();
		 for(double d:map.keySet())
		 {
			// System.out.println("Team");
			 for(Player player:map.get(d))
			 {
				 
				 //System.out.println(player.getUsername());
			 }
		 }
		//generez o Map in care pentru fiecare echipa am un scor total
		//ListCombinations();
	}
}
