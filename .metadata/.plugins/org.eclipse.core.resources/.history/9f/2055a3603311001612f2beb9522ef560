package views;

import java.io.IOException;
import java.io.Serializable;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import dataAccessLayer.GameDataAccess;
import dataAccessLayer.PlayerDataAccess;
import model.Game;
import model.Player;

@ManagedBean(name = "loginView")
@SessionScoped
public class LoginView implements Serializable {
    /**
     * 
     */
    private static final long serialVersionUID = 1L;
    private String username;
    private String password;
    private int playedGames;
    private int winner;
    private int looser;
    private boolean value;
    private boolean click;

	public boolean isClick() {
		return click;
	}

	public void setClick(boolean click) {
		this.click = click;
	}

	public boolean getValue() {
        return value;
    }
 
    public void setValue(boolean value) {
        this.value = value;
    }
    
    public int getPlayedGames() {
		if(this.currentPlayer.getGames()!=null)
		{
			playedGames= this.currentPlayer.getGames().size();
		}
		return playedGames;
	}

	public void setPlayedGames(int playedGames) {
		this.playedGames = playedGames;
	}

	public int getWinner() {
		return winner;
	}
	
	public void setWinner(int winner) {
		this.winner = winner;
	}

	public int getLooser() {
		return looser;
	}

	public void setLooser(int looser) {
		this.looser = looser;
	}
	
	private String oldPass;
	private String newPass;
	private String confirmPass;
	
	public String getOldPass() {
		return oldPass;
	}
	public void setOldPass(String oldPass) {
		this.oldPass = oldPass;
	}
	public String getNewPass() {
		return newPass;
	}
	public void setNewPass(String newPass) {
		this.newPass = newPass;
	}
	public String getConfirmPass() {
		return confirmPass;
	}
	public void setConfirmPass(String confirmPass) {
		this.confirmPass = confirmPass;
	}

	private Player currentPlayer;
    
    @PostConstruct
    public void init() {
    	currentPlayer=new Player();
    }
    
    public Player getCurrentPlayer() {
		return currentPlayer;
	}

	public void setCurrentPlayer(Player currentPlayer) {
		this.currentPlayer = currentPlayer;
	}

	public String getUsername() {
		return this.username;
    }

    public void setUsername(String value) {
    	this.username = value;
    }

    public String getPassword() {
	return password;
    }

    public void setPassword(String value) {
	this.password = value;
    }

    public String login() {
		if ((this.username != null) && (this.password != null)) {
			currentPlayer = PlayerDataAccess.loginUser(this.username, this.password);
			RedirectView.Redirect(this.currentPlayer, "/faces/resources/userview.xhtml", "/faces/resources/adminuser.xhtml");
		}
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage(FacesMessage.SEVERITY_WARN, "Warning!", "Incorrect username or password!"));
		return "/index";
	}
    
	public void logout(ActionEvent event)  {
	    FacesContext.getCurrentInstance().getExternalContext().invalidateSession();
		System.out.println("Logout pressed!");
		ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
		try {
			context.redirect(context.getRequestContextPath() + "/faces/index.xhtml");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void showMenu(ActionEvent event)  {
	   System.out.println("Show menu");
	   if(this.click)
	   {
		   this.click=false;
	   }
	   else
	   {
		   this.click=true;
	   }
	}
	
	public void redirectToHome(ActionEvent event)
	{
		RedirectView.Redirect(this.currentPlayer, "/faces/resources/index.xhtml", "/faces/resources/index.xhtml");
	}
	
	public void redirectToNextGames(ActionEvent actionEvent)
	{
		this.click=false;
		ELContext context = FacesContext.getCurrentInstance().getELContext();
		NextGamesView firstBean = (NextGamesView) context.getELResolver().getValue(context, null, "nextGamesView");
		firstBean.setGames(GameDataAccess.listNextGames());	
		RedirectView.Redirect(this.currentPlayer, "/faces/resources/nextusergames.xhtml", "/faces/resources/nextadmingames.xhtml");
	}
	
	public void redirectToPersonalDates(ActionEvent actionEvent)
	{
		this.click=false;
		if(this.currentPlayer.getGames()!=null)
		{
			this.playedGames=this.currentPlayer.GetTotalPlayedGames();
		}
		if(this.currentPlayer.getTeams()!=null)
		{
			this.winner=this.currentPlayer.GetGames(true);
			this.looser=this.currentPlayer.GetGames(false);
		}
		RedirectView.Redirect(this.currentPlayer,"/faces/resources/viewpersonaldates.xhtml","/faces/resources/viewpersonaldates.xhtml");
	}
	
	public void redirectToChangePass(ActionEvent actionEvent)
	{
		this.click=false;
		this.oldPass="";
		this.newPass="";
		this.confirmPass="";
		RedirectView.Redirect(this.currentPlayer,"/faces/resources/changepassword.xhtml","/faces/resources/changepassword.xhtml");
	}
	
	public void redirectToCharts(ActionEvent actionEvent)
	{
		this.click=false;
		
		System.out.println("Hello from redirect to charts!");
		
		ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();	
		ELContext elContext = FacesContext.getCurrentInstance().getELContext();
		ChartView firstBean = (ChartView) elContext.getELResolver().getValue(elContext, null, "chartView");

		firstBean.addPlayerToChart(this.currentPlayer);
		firstBean.createLineModels();
		
		if(this.currentPlayer.getType()==1)
		{	
			try {
				context.redirect(context.getRequestContextPath() + "/faces/resources/userchart.xhtml");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		else
		{
			try {
				context.redirect(context.getRequestContextPath() + "/faces/resources/adminchart.xhtml");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}
	
	public void redirectToPlayers(ActionEvent actionEvent)
	{
		this.click=false;
		System.out.println("Hello from redirect to players!");
		ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();		
		if(this.currentPlayer.getType()==1)
		{
			try {
				context.redirect(context.getRequestContextPath() + "/faces/resources/viewplayers.xhtml");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		else
		{
			try {
				context.redirect(context.getRequestContextPath() + "/faces/resources/adminplayersview.xhtml");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}
	
	 public void redirectToHistory(ActionEvent actionEvent)
	 {
		this.click=false;
		System.out.println("Hello from redirect to history!");
	    ELContext context = FacesContext.getCurrentInstance().getELContext();
		NextGamesView firstBean = (NextGamesView) context.getELResolver().getValue(context, null, "nextGamesView");
		firstBean.setGames(GameDataAccess.listPreviousGames());	
		System.out.println("Done");
		RedirectView.Redirect(this.currentPlayer, "/faces/resources/historyuser.xhtml", "/faces/resources/historyadmin.xhtml");
	 }
	
	  public void changePassword() {
		  this.click=false;
		  if(this.oldPass.compareTo(this.currentPlayer.getPassword())==0)
		  {
			  if(this.newPass.compareTo(this.confirmPass)==0)
			  {
				  PlayerDataAccess.updatePassword(this.currentPlayer.getId(),this.newPass);
				  FacesContext.getCurrentInstance().addMessage(null,
							new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO", "Succesfully saved new password!"));
			  }
			  else
			  {
				  FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_WARN, "Warn!", "New password does not match!"));  
			  }
		  }
		  else
		  {
			  FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_WARN, "Warn!", "Wrong old password!"));
		  }
	}
	  
	  public void changeAvailability() {
		    this.click=false;
			PlayerDataAccess.changeAvailable(this.currentPlayer);
			if(this.currentPlayer.getAvailable())
			{
				FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO", "You are now available!"));
			}
			else
			{
				FacesContext.getCurrentInstance().addMessage(null,
					new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO", "From now you are unavailable!"));		
			}
	  }  

}