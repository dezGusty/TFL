package views;

import model.Game;
import model.Player;
import model.Team;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.DualListModel;
import dataAccessLayer.GameDataAccess;
import dataAccessLayer.PlayerDataAccess;
import dataAccessLayer.TeamDataAccess;
import helpers.PlayerHelper;
import helpers.RedirectView;
import helpers.TeamGenerator;

@ManagedBean(name = "nextGamesView")
@SessionScoped
public class NextGamesView implements Serializable {

	private static final long serialVersionUID = 1L;
	public final int MAXNUMBEROFPLAYERS = 14;
	public List<Game> games;
	private Game selectedGame;
	private Date gameDate;

	public Game getSelectedGame() {
		return selectedGame;
	}

	public void setSelectedGame(Game selectedGame) {
		this.selectedGame = selectedGame;
	}

	public Date getGameDate() {
		return gameDate;
	}

	public void setGameDate(Date gameDate) {
		this.gameDate = gameDate;
	}

	public List<Game> getGames() {
		return games;
	}

	public void setGames(List<Game> game) {
		games = game;
	}

	@PostConstruct
	public void init() {
		this.games = new ArrayList<Game>();
		this.gameDate = new Date();
		this.selectedGame = new Game();
	}

	public void play(Game game) {
		ELContext elContext = FacesContext.getCurrentInstance().getELContext();
		LoginView firstBean = (LoginView) elContext.getELResolver().getValue(elContext, null, "loginView");
		int playerID = firstBean.currentPlayer.getId();
		String action = game.playUnplay(firstBean.getCurrentPlayer());
		if (action.compareTo("Play") == 0) {
			if (game.getPlayers().size() >= MAXNUMBEROFPLAYERS) {
				GameDataAccess.AddWaitingPlayer(game.getId(), playerID);
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!",
						"There are already " + MAXNUMBEROFPLAYERS + " players!"));
			} else {
				firstBean.setCurrentPlayer(GameDataAccess.PlayGame(game.getId(), playerID));
				this.generateTeams(game.getId());
				FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!",
						"You are now playing on " + game.dateToDisplay()));
			}
		} else {
			GameDataAccess.removePlayer(game.getId(), playerID);
			if (game.getTeam1().containsPlayer(firstBean.getCurrentPlayer())) {
				TeamDataAccess.RemovePlayerFromTeam(game.getTeam1().getId(), playerID);
			} else {
				TeamDataAccess.RemovePlayerFromTeam(game.getTeam2().getId(), playerID);
			}
			Player nextPlayer = game.getFirstPlayerWaiting();
			if (nextPlayer.getId() != null) {
				GameDataAccess.removeWaitingPlayer(game.getId(), nextPlayer.getId());
				GameDataAccess.PlayGame(game.getId(), nextPlayer.getId());
				game = this.generateTeams(game.getId());
			}
			FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!",
					"Done! You are not playing anymore on  " + game.dateToDisplay()));
		}
		this.games = GameDataAccess.ListNextGames();
	}

	public void newGame() {
		if(canAddGame(this.gameDate))
		{
			Team first = TeamDataAccess.CreateNewTeam(new Team("First team"));
			Team second = TeamDataAccess.CreateNewTeam(new Team("Second team"));
			try {
				SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm");
				Game gameToAdd = new Game(this.gameDate, first, second);		
				GameDataAccess.AddNewGame(gameToAdd);
				FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!", "New game on " + format.format(gameDate)));
			} catch (Exception ex) {
				System.out.println(ex.getMessage());
			}
		}
	}

	private boolean canAddGame(Date date)
	{
		if(date.before(new Date()) ||date.compareTo(new Date())==0)
		{
			FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage(FacesMessage.SEVERITY_WARN, null, "Invalid date! Choose a date after current time!"));
			return false;
		}
		List<Game> list=GameDataAccess.ListNextGames();
		for(Game game:list)
		{
			if(game.getDate().compareTo(date)==0){
				FacesContext.getCurrentInstance().addMessage(null,
						new FacesMessage(FacesMessage.SEVERITY_WARN, null, "Invalid date! There is already a game for selected date!"));
				return false;
			}
		}
		return true;
	}
	
	public void remove(Game game) {
		GameDataAccess.AddToArchive(game.getId());
		games.remove(game);
		FacesContext.getCurrentInstance().addMessage(null,
				new FacesMessage(FacesMessage.SEVERITY_INFO, "INFO!", "Game canceled! "));
	}

	public void teamsView(Game game) {
		Game selectGame = GameDataAccess.GetGame(game.getId());
		this.selectedGame = selectGame;
		ELContext context = FacesContext.getCurrentInstance().getELContext();
		TeamsView teamsBean = (TeamsView) context.getELResolver().getValue(context, null, "teamsView");
		WaitingPlayers waitToPlay = (WaitingPlayers) context.getELResolver().getValue(context, null, "waitingPlayers");
		waitToPlay.setPlayers(PlayerDataAccess.ListActivePlayers());
		if (selectGame != null) {
			teamsBean.setGame(selectGame);
		}
		if (selectGame.getPlayersWaiting() != null) {
			waitToPlay.setPlayers(new ArrayList<Player>());
			waitToPlay.getPlayers().addAll(selectGame.getPlayersWaiting());
		}
		teamsBean.setPlayers(new DualListModel<>(new ArrayList<Player>(selectGame.getTeam1().getPlayers()),
				new ArrayList<Player>(selectGame.getTeam2().getPlayers())));
		RedirectView.Redirect("/resources/teams.xhtml");
	}

	public void addTeamsResults(Game game) {
		Game selectGame = GameDataAccess.GetGame(game.getId());
		this.selectedGame = selectGame;
		ELContext context = FacesContext.getCurrentInstance().getELContext();
		TeamsView teamsBean = (TeamsView) context.getELResolver().getValue(context, null, "teamsView");
		WaitingPlayers waitToPlay = (WaitingPlayers) context.getELResolver().getValue(context, null, "waitingPlayers");
		if (selectGame != null) {
			teamsBean.setGame(selectGame);
		}
		if (selectGame.getPlayersWaiting() != null) {
			waitToPlay.setPlayers(new ArrayList<Player>());
			waitToPlay.getPlayers().addAll(selectGame.getPlayersWaiting());
		}
		teamsBean.setPlayers(new DualListModel<>(new ArrayList<Player>(selectGame.getTeam1().getPlayers()),
				new ArrayList<Player>(selectGame.getTeam2().getPlayers())));
		RedirectView.Redirect("/resources/historyteams.xhtml");
	}

	public Game generateTeams(int gameId) {
		Game game = GameDataAccess.GetGame(gameId);
		game.setTeam1(TeamDataAccess.RemoveAllPlayers(game.getTeam1().getId()));
		game.setTeam2(TeamDataAccess.RemoveAllPlayers(game.getTeam2().getId()));

		if (game.getPlayers().size() < 4) {
			for (Player player : game.getPlayers()) {
				if (game.getTeam1().containsPlayer(player) == false) {
					game.setTeam1(TeamDataAccess.AddNewPlayer(game.getTeam1().getId(), player.getId()));
				}
			}
		} else {
			TeamDataAccess.RemoveAllPlayers(game.getTeam1().getId());
			TeamDataAccess.RemoveAllPlayers(game.getTeam2().getId());
			TeamGenerator tg = new TeamGenerator(new ArrayList<Player>(game.getPlayers()));
			List<Player> firstList = tg.GetBestTeam();
			for (Player play : firstList) {
				game.setTeam1(TeamDataAccess.AddNewPlayer(game.getTeam1().getId(), play.getId()));
			}
			for (Player play : game.getPlayers()) {
				if (PlayerHelper.ExistsInList(play, firstList) == false) {
					game.setTeam2(TeamDataAccess.AddNewPlayer(game.getTeam2().getId(), play.getId()));
				}
			}
		}
		game = GameDataAccess.UpdateGame(game);
		return game;
	}

	public void onRowSelect(SelectEvent event) {
		this.selectedGame = (Game) event.getObject();
	}
}