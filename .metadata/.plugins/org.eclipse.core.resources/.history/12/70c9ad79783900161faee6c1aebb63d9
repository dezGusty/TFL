package helpers;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import model.Player;

public class TeamGenerator {

	private  double totalValue=0;
	private TreeMap<Double,List<Player>> map;
	private List<List<Player>> resultList;
	private List<Player> list;
	
	public TeamGenerator(List<Player> inputList)
	{
		if(inputList!=null)
		{
			this.list=inputList;
		}
		this.resultList=new ArrayList<List<Player>>();
		TeamGenerator.list=new ArrayList<Player>(game.getPlayers());
		this.generateTeams();
		TeamGenerator.printMap(TeamGenerator.map);
		List<Player> firstList = TeamGenerator.GetBestTeam();
		
	}

	private void GetTotalValue(List<Player> players)
	{
			 for(Player p:players)
			 {
				 totalValue+=p.getRating();
			 }
			 totalValue=totalValue/2; 
	}
	
    private void getCombinations(Player[] arr, int len, int startPosition, Player[] result){
    		  
        if (len == 0){	
        	resultList.add(Arrays.asList(result));
        	List<Player> lisst=new ArrayList<Player>();
        	for(Player p:Arrays.asList(result))
        	{
        		lisst.add(p);
        	}
        	resultList.add(lisst);
            return;
        }            
        for (int i = startPosition; i <= arr.length-len; i++){
            result[result.length - len] = arr[i];
            getCombinations(arr, len-1, i+1, result);
        }
    }  

	private TreeMap<Double,List<Player>> generateTeams()
	{		
		Player[] array = new Player[list.size()];
		list.toArray(array); 
		
		GetTotalValue(list);
		System.out.println("Total value" +totalValue);
		
		int nrOfPlayersForTeam=list.size()/2;
		getCombinations(array,nrOfPlayersForTeam, 0,new Player[nrOfPlayersForTeam]);
		
		 map = new TreeMap<Double, List<Player>>(new MapComparator(totalValue));
		 double idealValue=0;
		 
		 for(List<Player> list:resultList)
	        {
			 	idealValue=0;
	        	System.out.println("combination:");
	        	for(Player p:list)
	        	{
	        		idealValue+=p.getRating();
	        		System.out.println(p.getUsername());
	        	}
	        	map.put(idealValue, list);
	        	System.out.println("Strength "+idealValue);
	        }
		 return map;
	}

	public  List<Player> GetBestTeam()
	{
		Object key = this.map.keySet().toArray(new Object[this.map.size()])[0];
		return this.map.get(key);
	}
	
	public void printMap() {
		System.out.println("Valoare ideala a unei echipe: "+this.totalValue);
		System.out.println("Echipele sortate crescator in functie de 'echilibrul' obtinut sunt:");
		for (Map.Entry<Double, List<Player>> entry : map.entrySet()) {
			
			System.out.print(" Echipa: ");
			for(Player p:entry.getValue())
			{
				System.out.print(p.getUsername()+" ");		
			}
			
			System.out.print(" Diff : " + Math.abs(entry.getKey()-totalValue));
			System.out.print(" Suma rating-urilor : " +entry.getKey());			
			System.out.println();
		}
	}
}
