package dataAccessLayer;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;
import model.Player;

@ManagedBean(name = "playerDataAccess")
@ApplicationScoped
public class PlayerDataAccess implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static boolean createUser(String username, String password, int type, boolean available, double rating) {
		try {
			EntityManagerFactory emf = Persistence.createEntityManagerFactory("TFL");
			EntityManager em = emf.createEntityManager();
			if(!em.getTransaction().isActive())
			{
				em.getTransaction().begin();
			}
			Player emp = new Player();
			emp.setType(type);
			emp.setUsername(username);
			emp.setPassword(password);
			emp.setRating(rating);
			emp.setAvailable(available);
			em.persist(emp);
			em.getTransaction().commit();
			em.close();
		} catch (Exception ex) {
			System.out.println(ex.getMessage());
			return false;
		}
		return true;
	}

	public static Player loginUser(String username, String password) {	
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("TFL");
		EntityManager em = emf.createEntityManager();
		if(em.getTransaction().isActive())
		{
			em.getTransaction().begin();
		}
		TypedQuery<Player> querynew = em.createQuery("SELECT c FROM Player c WHERE c.username = :name AND c.password=:pass", Player.class);
		querynew.setParameter("name", username);
		querynew.setParameter("pass", password);
		Player play = new Player();
		try {
			play = querynew.getSingleResult();
		} catch (Exception ex) {
			System.out.println("Username or password incorrect!");
		}
		em.close();
		return play;
	}

	public Player changePasswordForPlayer(int playerId, String password) {
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("TFL");
		EntityManager em = emf.createEntityManager();
		TypedQuery<Player> query =em.createQuery("SELECT c FROM Player c WHERE c.id = :id", Player.class);
		query.setParameter("id", playerId);

		Player play = new Player();
		try {
			play = query.getSingleResult();
			if (play.getId() != 0) {
				System.out.println(play.getPassword() + " este parola ce va fi schimbata!");
				play.setPassword(password);
				em.persist(play);
				em.getTransaction().commit();
				em.close();
				return play;
			}
		} catch (Exception ex) {
			System.out.println("Username or password incorrect!");
		}
		return null;
	}

	public static Player changeAvailable(Player player)
	{
		EntityManagerFactory emf = Persistence.createEntityManagerFactory("TFL");
		EntityManager em = emf.createEntityManager();
		Player play =em.find(Player.class, player.getId());
		em.persist(play);
		em.getTransaction().commit();
		em.close();
        return play;
	}
	
	  public static List<Player> listPlayers() {
		  EntityManagerFactory emf = Persistence.createEntityManagerFactory("TFL");
			EntityManager em = emf.createEntityManager();
		    TypedQuery<Player> query =em.createQuery("SELECT p FROM Player p",Player.class);
			List<Player> result = new ArrayList<Player>();
			result = query.getResultList();
			for(Player p:result)
			{
				System.out.println(p.getUsername());
			}
			em.close();
			return result;
	}

	  public static boolean removePlayer(int playerId) {
		  EntityManagerFactory emf = Persistence.createEntityManagerFactory("TFL");
			EntityManager em = emf.createEntityManager();
			Player player=em.find(Player.class, playerId);
			if(player!=null)
			{			
				em.remove(player);
				System.out.println("Player found and removed");
				em.getTransaction().commit();
				em.close();
				return true;
			}
			else
			{
				System.out.println("Player not found");
			}
			return false;
		}
	  
	  public static void main(String[] args) {
	}
}