package views;
import model.Game;
import model.GamePlayer;
import model.Player;
import model.Team;
import model.TeamPlayer;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.el.ELContext;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import org.primefaces.model.DualListModel;

import dataAccessLayer.GameDataAccess;
import dataAccessLayer.TeamDataAccess;

@ManagedBean(name = "nextGamesView")
@SessionScoped
public class NextGamesView implements Serializable{

	 private static final long serialVersionUID = 1L;
	    public static List<Game> games;
	    
	    @ManagedProperty("#{gameDataAccess}")
	    public GameDataAccess gamesData;
	    
	    private Game selectedGame;

	    public List<Game> getGames() {
	        return games;
	    }
	    
	    public void setGames(List<Game> game) {
	        games=game;
	    }
	 
		public GameDataAccess getGamesData() {
			return gamesData;
		}

		public void setGamesData(GameDataAccess gamesData) {
			this.gamesData = gamesData;
		}
		
		public Game getSelectedGame() {
	        return selectedGame;
	    }
	 
		public void setSelectedGame(Game selectedGame) {
			this.selectedGame = selectedGame;
		}
		
		public void play(Game game) {
			System.out.println("PlayGame!");
			ELContext elContext = FacesContext.getCurrentInstance().getELContext();
			LoginView firstBean = (LoginView) elContext.getELResolver().getValue(elContext, null, "loginView");
			GameDataAccess gda=new GameDataAccess();
			gda.playGame(game, firstBean.getCurrentPlayer());
			System.out.println("Done");
		}
		
		public void remove(Game game) {
			System.out.println("Remove game "+game.getId());
			GameDataAccess gda=new GameDataAccess();
			gda.removeGame(game.getId());
			games.remove(game);
		}
		
		public void viewTeams(Game game)
		{		
        	this.setSelectedGame(game);
        	
        	//iau userul pentru a verifica ce tip este(normal user sau admin)
			ELContext elContext = FacesContext.getCurrentInstance().getELContext();
			LoginView firstBean = (LoginView) elContext.getELResolver().getValue(elContext, null, "loginView");
			
			ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();		
			TeamsView teamsBean = (TeamsView) elContext.getELResolver().getValue(elContext, null, "teamsView");
			
			//verific daca jocul are echipe
			if(this.selectedGame.getTeams().isEmpty() || this.selectedGame.getTeams().size()!=2)
				//in cazul in care nu are verific daca are jucatori inscrisi
			{
				System.out.println("This game has no teams!");
				if(this.selectedGame.getGamePlayers().isEmpty())
				{
					System.out.println("This game has no game players");
					teamsBean.themesSource.removeAll(teamsBean.themesSource);
					teamsBean.themesTarget.removeAll(teamsBean.themesTarget);
					teamsBean.setTeamOne(null);
					teamsBean.setTeamTwo(null);
					teamsBean.setPlayers( new DualListModel<>(teamsBean.themesSource, teamsBean.themesTarget));
				}
				else
				{
					
					System.out.println("Players subscribed to this game:");
					List<Player> list=new ArrayList<Player>();
					
					for(GamePlayer player:this.selectedGame.getGamePlayers())
					{
						list.add(player.getPlayer());
						//System.out.println(player.getPlayer().getUsername());
					}
					for(Player p:list)
					{
						System.out.println(p.toString());
					}
					this.generateTeams(list);
//					List<Team> list=new ArrayList<Team>();
//					list=generateTeams(this.selectedGame);
//					System.out.println("Teams are:");
//					for(Team t:list)
//					{
//						System.out.println(t.getName());
//						System.out.println("Players");
//						for(TeamPlayer tp:t.getTeamPlayers())
//						{
//							System.out.println(tp.getPlayer().getUsername());
//						}
//					}
//					teamsBean.setTeamOne(list.get(0));
//					teamsBean.setTeamTwo(list.get(1));
					teamsBean.setPlayers( new DualListModel<>(teamsBean.themesSource, teamsBean.themesTarget));
				}
			}
			else
			{
				System.out.println("This game has "+this.selectedGame.getTeams().size()+" teams!");				
				//verific daca jocul are 2 echipe
				//in cazul in care are doua echipe afisez echipele
				if(this.selectedGame.getTeams().size()==2)
				{
					teamsBean.setTeamOne(this.selectedGame.getTeams().get(0));
					for(TeamPlayer tp:teamsBean.getTeamOne().getTeamPlayers())
					{
						teamsBean.themesSource.add(tp.getPlayer());
					}
					teamsBean.setTeamTwo(this.selectedGame.getTeams().get(1));
					for(TeamPlayer tp:teamsBean.getTeamTwo().getTeamPlayers())
					{
						teamsBean.themesTarget.add(tp.getPlayer());
					}
					teamsBean.setPlayers( new DualListModel<>(teamsBean.themesSource, teamsBean.themesTarget));
					teamsBean.setExistTeams(true);
				}			
			}
			
			//redirectionez catre TeamsView in functie de tipul de user
			if(firstBean.getCurrentPlayer().getType()==1)
			{
				try {
					context.redirect(context.getRequestContextPath() + "/faces/resources/teamsuser.xhtml");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			else
			{
				try {
					context.redirect(context.getRequestContextPath() + "/faces/resources/teamsadmin.xhtml");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
//			else
//			{
//				TeamsView teamsBean = (TeamsView) elContext.getELResolver().getValue(elContext, null, "teamsView");
//				
//				if(game.getTeams()!=null)
//				{
//					if(game.getTeams().size()!=0)
//					{
//						System.out.println("This game has "+game.getTeams().size()+ " teams");
//						if(game.getTeams().size()==2)
//						{ 
//							for(TeamPlayer tp:game.getTeams().get(0).getTeamPlayers())
//							{
//								for(Player p:teamsBean.themesSource)
//								{
//									teamsBean.themesSource.remove(p);
//								}
//								teamsBean.themesSource.add(tp.getPlayer());
//							}
//							for(TeamPlayer tp:game.getTeams().get(1).getTeamPlayers())
//							{
//								for(Player p:teamsBean.themesTarget)
//								{
//									teamsBean.themesTarget.remove(p);
//								}
//								teamsBean.themesTarget.add(tp.getPlayer());
//							}
//							teamsBean.setTeamOne(game.getTeams().get(0));
//							teamsBean.setTeamTwo(game.getTeams().get(1));
//							try {
//								context.redirect(context.getRequestContextPath() + "/faces/resources/teamsadmin.xhtml");
//							} catch (IOException e) {
//								// TODO Auto-generated catch block
//								e.printStackTrace();
//							}
//						}
//					}
//					else
//					{
//						List<GamePlayer> gamePlayers=new ArrayList<GamePlayer>();
//						gamePlayers=game.getGamePlayers();
//					
//						for(int i=0;i<(gamePlayers.size()/2);i++)
//						{
//
//							teamsBean.themesSource.add(gamePlayers.get(i).getPlayer());
//						}
//						for(int i=(gamePlayers.size()/2);i<gamePlayers.size();i++)
//						{
//							teamsBean.themesTarget.add(gamePlayers.get(i).getPlayer());
//						}
//
//						try {
//							context.redirect(context.getRequestContextPath() + "/faces/resources/teamsadmin.xhtml");
//						} catch (IOException e) {
//							// TODO Auto-generated catch block
//							e.printStackTrace();
//						}
//				}
	//			}
		//	}
		}

		public List<List<Player>> generateTeams(List<Player> players)
		{
			List<List<Player>> list=new ArrayList<List<Player>>(2);
			list.set(0, new ArrayList<Player>());
			list.set(1, new ArrayList<Player>());
			for(int i=0;i<(players.size()/2);i++)
			{
				list.get(0).add(players.get(i));
			}
			for(int j=(players.size()/2);j<players.size();j++)
			{
				list.get(1).addA(players.get(j));
			}
		
			return list;
		}
		
}

