package dataAccessLayer;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import helpers.EntitiesManager;
import model.Game;
import model.Player;
import model.PlayerRating;

@ManagedBean(name = "playerDataAccess")
@ApplicationScoped
public class PlayerDataAccess implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public static Player FindPlayer(int playerid)
	{
		EntityManager em=EntitiesManager.GetManager();
		Player player=em.find(Player.class, playerid);
		return player;
	}
	
	public static Player CreateNewUser(String username, String password,Double rating) {
		Player emp = new Player(username,password,rating);
		emp.setStars(rating.intValue());
		EntityManager em=EntitiesManager.GetManager();
		try {
			em.getTransaction().begin();
			
			em.persist(emp);
			em.getTransaction().commit();
			em.refresh(emp);
			em.close();
		} catch (Exception ex) {
			System.out.println(ex.getMessage());
		}
		return emp;
	}

	public static int LoginUser(String username, String password) {	
		EntityManager em=EntitiesManager.GetManager();
		
		TypedQuery<Player> query = em.createQuery("SELECT c FROM Player c WHERE c.username = :name AND c.password=:pass", Player.class);
		query.setParameter("name", username);
		query.setParameter("pass", password);
		int result=0;
		try {
			Player player=query.getSingleResult();
			if(player!=null)
			{
				result=player.getId();
			}
		} catch (Exception ex) {
			System.out.println(ex.getMessage());
		}
		return result;
	}
	
	public static Player UpdatePassword(int playerId, String password) {
		EntityManager em=EntitiesManager.GetManager();
		em.getTransaction().begin();
		
		Player play =em.find(Player.class, playerId);
		try {
			   play.setPassword(password);
			   EntitiesManager.EM.persist(play);
			   EntitiesManager.EM.getTransaction().commit();
			   EntitiesManager.EM.refresh(play);
		} catch (Exception ex) {
			System.out.println(ex.getMessage());
		}
		return play;
	}

	public static Player updateProfilePicture(int playerId, String newPicture) {
		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		Player play =EntitiesManager.EM.find(Player.class, playerId);
		try {
			    play.setPicture(newPicture);
			    EntitiesManager.EM.merge(play);
			    EntitiesManager.EM.getTransaction().commit();
				return play;
		} catch (Exception ex) {
			System.out.println(ex.getMessage());
		}
		return null;
	}
	
	public static Player ChangeAvailable(int playerId, boolean available)
	{	
		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		Player play =EntitiesManager.EM.find(Player.class, playerId);
		play.setAvailable(available);
		EntitiesManager.EM.persist(play);
		EntitiesManager.EM.getTransaction().commit();
		EntitiesManager.EM.refresh(play);
        return play;
	}
	
	public static Player updateRating(int playerId, Double rating)
	{	
		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		Player play =EntitiesManager.EM.find(Player.class,playerId);
		if(play!=null)
		{
			play.setRating(rating);
			play.setStars(play.getRating().intValue());
		}
		EntitiesManager.EM.merge(play);
		EntitiesManager.EM.getTransaction().commit();
		EntitiesManager.EM.refresh(play);
        return play;
	}

	public static List<Player> ListAllPlayers() {

		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		    TypedQuery<Player> query =EntitiesManager.EM.createQuery("SELECT p FROM Player p",Player.class);
			List<Player> result = new ArrayList<Player>();
			result = query.getResultList();
			for(Player p:result)
			{
				System.out.println(p.getUsername());
			}
			return result;
	}

	  public static boolean RemovePlayer(int playerId) {
		  if(EntitiesManager.EM.getTransaction().isActive()==false)
			{
				EntitiesManager.EM.getTransaction().begin();
			}
			Player player=EntitiesManager.EM.find(Player.class, playerId);
			if(player!=null)
			{			
				player.setArchive(true);
				EntitiesManager.EM.getTransaction().commit();
				return true;
			}
			else
			{
				System.out.println("Player not found");
				return false;
			}
		}
	  
	  public static boolean DeleteRatingsBeforeGame(int playerId,int gameId) {
		  if(EntitiesManager.EM.getTransaction().isActive()==false)
			{
				EntitiesManager.EM.getTransaction().begin();
			}
			Player player=EntitiesManager.EM.find(Player.class, playerId);
			Game game=EntitiesManager.EM.find(Game.class, gameId);
			
			if(player!=null && game!=null)
			{		
				System.out.println("Player games:");
				for(Game g:player.getGames())
				{
					System.out.println(g.toString());
				}
				System.out.println("Player ratings:");
				for(PlayerRating pl:player.getPlayerRatings())
				{
					System.out.println(pl.toString());
				}			
				if(player.hasRatingForGame(game))
				{
					System.out.println("There is already rating for this game!");
					for(PlayerRating pl:player.getPlayerRatings())
					{
						if((pl.getDate().after(game.getDate())) || (pl.getDate().compareTo(game.getDate())==0) )
						{
							PlayerRatingAccess.DeleteRating(pl.getId());
						}
					}
					return true; 
				}
				else
				{
					System.out.println("There is no rating for this game!");
				}
			}
			EntitiesManager.EM.getTransaction().commit();
			return false;
		}
	  
	  public static Player UpdateLastValidRating(int playerId)
	  {
		  if(EntitiesManager.EM.getTransaction().isActive()==false)
			{
				EntitiesManager.EM.getTransaction().begin();
			}
			Player player=EntitiesManager.EM.find(Player.class, playerId);
			if(player!=null)
			{
				player.setRating(player.getLastRating());
				player.setStars(player.getRating().intValue());
				System.out.println("last rating is: "+player.getRating());
				EntitiesManager.EM.merge(player);
				EntitiesManager.EM.getTransaction().commit();
				EntitiesManager.EM.refresh(player);
			}
			return player;
	  }
	  
	  public static Player NewRatingForGame(int playerId,int gameId)
	  {
		  if(EntitiesManager.EM.getTransaction().isActive()==false)
			{
				EntitiesManager.EM.getTransaction().begin();
			}
			Player player=EntitiesManager.EM.find(Player.class, playerId);
			Game game=EntitiesManager.EM.find(Game.class, gameId);
			if(player!=null && game!=null)
			{
				System.out.println("Current player rating: "+player.getRating());
				System.out.println("Game difference: "+game.getDifference());
				if(game.getTeam1().containsPlayer(player))
				{
					if(game.getTeam1().getWinner())
					{
						player.setRating(player.getRating()+(game.getDifference()*0.01));
					}
					else
					{
						player.setRating(player.getRating()-(game.getDifference()*0.01));
					}
				}
				else
				{
					if(game.getTeam2().containsPlayer(player))
					{
						if(game.getTeam2().getWinner())
						{
							player.setRating(player.getRating()+(game.getDifference()*0.01));
						}
						else
						{
							player.setRating(player.getRating()-(game.getDifference()*0.01));
						}
					}
				}
				EntitiesManager.EM.merge(player);
				EntitiesManager.EM.getTransaction().commit();
				EntitiesManager.EM.refresh(player);
			}
			return player;
	  }
	  	  
	  public static List<Player> ListActivePlayers() {	
		  if(EntitiesManager.EM.getTransaction().isActive()==false)
		  {
			  EntitiesManager.EM.getTransaction().begin();
		  }
		  TypedQuery<Player> query = EntitiesManager.EM.createQuery("SELECT p FROM Player p WHERE p.archive = false", Player.class);
		  List<Player> result = new ArrayList<Player>();
		  result = query.getResultList();
		  return result;
	  }
}