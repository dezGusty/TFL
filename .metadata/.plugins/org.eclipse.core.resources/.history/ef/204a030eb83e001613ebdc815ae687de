package dataAccessLayer;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import helpers.EntitiesManager;
import model.Game;
import model.Player;
import model.Team;

@ManagedBean(name = "gameDataAccess")
@SessionScoped
public class GameDataAccess implements Serializable {

	/**
	* 
	*/
	private static final long serialVersionUID = 1L;
	
	public static Game GetGame(int gameId)
	{
		Game game=EntitiesManager.EM.find(Game.class, gameId);
		return game;
	}
	
	public static Game UpdateGame(Game gameToUpdate)
	{
		EntityManager em=EntitiesManager.GetManager();
		em.getTransaction().begin();
		Game g=EntitiesManager.EM.find(Game.class, gameToUpdate.getId());		

		if(g!=null)
		{
			g.setTeam1(gameToUpdate.getTeam1());
			g.setTeam2(gameToUpdate.getTeam2());
		}
		
		em.merge(g);
		em.getTransaction().commit();
		em.refresh(g);
		em.close();
		return g;
	}
	
	public static List<Game> ListPreviousGames() {
		EntityManager em=EntitiesManager.GetManager();
		TypedQuery<Game> query =em.createQuery("SELECT g FROM Game g where g.date < current_date", Game.class);
		List<Game> result = new ArrayList<Game>();
		result = query.getResultList();
		em.close();
		return result;
	}

	public static List<Game> ListNextGames() {
		EntityManager em=EntitiesManager.GetManager();
		TypedQuery<Game> query =em.createQuery("SELECT g FROM Game g where g.date >= current_date and g.archive = false", Game.class);
		List<Game> result = new ArrayList<Game>();	
		result = query.getResultList();
		em.close();
		return result;
	}
		
	public static Game AddToArchive(int gameId)
	{
		EntityManager em=EntitiesManager.GetManager();
		em.getTransaction().begin();

		Game gameToArchive=EntitiesManager.EM.find(Game.class,gameId);	
		if(gameToArchive !=null)
		{
			gameToArchive.setArchive(true);
			em.getTransaction().commit();
			em.refresh(gameToArchive);
			em.close();
		}
		return gameToArchive;
	}
	
	public static Game SetDifference(int gameId, int difference)
	{
		EntityManager em=EntitiesManager.GetManager();
		em.getTransaction().begin();
	
		Game game=EntitiesManager.EM.find(Game.class, gameId);
		if(game!=null)
		{
			game.setDifference(difference);
			EntitiesManager.EM.merge(game);
			EntitiesManager.EM.getTransaction().commit();
			EntitiesManager.EM.refresh(game);
			em.close();
		}	
		return game;
	}
	
	public static Game setDifference(int gameId, int difference,Team firstTeam, Team secondTeam) {
		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		Game g=EntitiesManager.EM.find(Game.class, gameId);
		System.out.println("First team:");
		for(Player p:firstTeam.getPlayers())
		{
			System.out.println(p.getUsername());
		}
		System.out.println("Second team:");
		for(Player p:secondTeam.getPlayers())
		{
			System.out.println(p.getUsername());
		}
		
		if(g !=null)
		{		
			g.setDifference(difference);
			g.setTeam1(firstTeam);
			g.setTeam2(secondTeam);

			EntitiesManager.EM.persist(firstTeam);
			EntitiesManager.EM.persist(secondTeam);
			EntitiesManager.EM.getTransaction().commit();
			
			EntitiesManager.EM.refresh(firstTeam);
			EntitiesManager.EM.refresh(secondTeam);
			System.out.println("First team refreshed id:"+firstTeam.getId());
			System.out.println("Second team refreshed id:"+secondTeam.getId());
			
			EntitiesManager.EM.persist(g);
			EntitiesManager.EM.getTransaction().commit();
			EntitiesManager.EM.refresh(g);
			return g;
		}
		return null;
	}
	
	public static Game UpdateTeams(Game game)
	{		
 		TeamDataAccess.UpdateTeam(game.getTeam1());
		TeamDataAccess.UpdateTeam(game.getTeam2());
		return game;
	}
	
	public static Game removePlayer(int gameID,int playerID)
	{
		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		Game game=EntitiesManager.EM.find(Game.class,gameID);	
		Player player=EntitiesManager.EM.find(Player.class,playerID);
		
		if(game!=null && player!=null)
		{
			game.getPlayers().remove(player);
		}
		
		EntitiesManager.EM.getTransaction().commit();
		EntitiesManager.EM.refresh(game);
		return game;
	}
	
	public static Game removeWaitingPlayer(int gameID,int playerID)
	{
		EntityManager em=EntitiesManager.GetManager();
		em.getTransaction().begin();
		
		Game game=EntitiesManager.EM.find(Game.class,gameID);	
		Player player=EntitiesManager.EM.find(Player.class,playerID);
		
		if(game!=null && player!=null)
		{
			game.getPlayersWaiting().remove(player);
		}
		
		em.getTransaction().commit();
		em.refresh(game);
		em.close();
		return game;
	}
	
	public static Game AddTeams(int gameid, int firstTeamId,int secondTeamId)
	{
		EntityManager em=EntitiesManager.GetManager();
		em.getTransaction().begin();
		
		Game g=em.find(Game.class, gameid);		
		Team a=em.find(Team.class, firstTeamId);
		Team b=em.find(Team.class, secondTeamId);
		
 		g.setTeam1(a);
		g.setTeam2(b);
		
		em.merge(g);
		em.getTransaction().commit();
		em.refresh(g);
		em.close();
		return g;
	}
	
	public static Game AddWaitingPlayer(int gameid, int playerId)
	{
		EntityManager em=EntitiesManager.GetManager();
		em.getTransaction().begin();
		
		Game game=em.find(Game.class, gameid);		
		Player player=em.find(Player.class, playerId);

		game.getPlayersWaiting().add(player);
		em.merge(game);
		em.getTransaction().commit();
		em.refresh(game);
		em.close();
		return game;
	}
	
	public static Game AddWaitingPlayerToGame(int gameid, int playerId)
	{
		EntityManager em=EntitiesManager.GetManager();
		em.getTransaction().begin();
		
		Game game=em.find(Game.class, gameid);		
		Player player=em.find(Player.class, playerId);
		
		game.getPlayers().add(player);
		game.getPlayersWaiting().remove(player);
		em.merge(game);
		em.getTransaction().commit();
		em.refresh(game);
		return game;
	}
	
	public static Team addTeamToGame(Team t,int  gId)
	{
		EntityManager em=EntitiesManager.GetManager();
		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		Game g=EntitiesManager.EM.find(Game.class, gId);
		Team team=EntitiesManager.EM.find(Team.class, t.getId());
		EntitiesManager.EM.persist(g);
		EntitiesManager.EM.getTransaction().commit();
		EntitiesManager.EM.refresh(g);
		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		return team;
	}
	
    public  static List<Game> listGamesForPlayer(Player player) {
    	if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		Player p=EntitiesManager.EM.find(Player.class, player.getId());
		List<Game> result = new ArrayList<Game>();
		
	    Date currentDate=new Date();
		currentDate=Calendar.getInstance().getTime();	
		if(p.getGames()!=null)
		{
			for(Game g: p.getGames())
			{
				if(g.getDate().after(currentDate) && (g.getArchive()==false))
				{
					result.add(g);
				}
			}
		}

		return result;
	}
	
	public static Player PlayGame(int gameId, int playerId) {		
		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		
		Player play =EntitiesManager.EM.find(Player.class,playerId);
		Game findGame=EntitiesManager.EM.find(Game.class, gameId);	
		
		try
		{
			findGame.addPlayer(play);
			EntitiesManager.EM.getTransaction().commit();
			EntitiesManager.EM.flush();
			//EntitiesManager.EM.refresh(findGame);
			//EntitiesManager.EM.refresh(play);
		}
		catch(Exception ex)
		{
			System.out.println(ex.getMessage());
		}
		return play;
	}

	public static Game AddNewGame(Game game)
	{
		if(EntitiesManager.EM.getTransaction().isActive()==false)
		{
			EntitiesManager.EM.getTransaction().begin();
		}
		try
		{
			EntitiesManager.EM.persist(game);
			EntitiesManager.EM.getTransaction().commit();
			EntitiesManager.EM.flush();
			return game;
		}
		catch(Exception ex)
		{
			ex.printStackTrace();
		}
		return null;	
	}
}