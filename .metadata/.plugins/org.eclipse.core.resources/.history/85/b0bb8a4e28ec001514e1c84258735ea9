package dataAccessLayer;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import javax.faces.bean.ApplicationScoped;
import javax.faces.bean.ManagedBean;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import model.Game;
import model.GameLoser;
import model.GamePlayer;
import model.GameWinner;
import model.Player;

@ManagedBean(name = "gameDataAccess")
@ApplicationScoped
public class GameDataAccess implements Serializable {

	/**
	* 
	*/
	private static final long serialVersionUID = 1L;
	//public EntityManagerFactory emf = Persistence.createEntityManagerFactory("TFL");
	//public EntityManager em = emf.createEntityManager();

	public GameDataAccess() {
		if (EntityManagerHelper.em.getTransaction().isActive() == false) {
			EntityManagerHelper.em.getTransaction().begin();
		}
	}

	public List<Game> listPreviousGames() {
		System.out.println("List previous games!");
		TypedQuery<Game> query =EntityManagerHelper.em.createQuery("SELECT g FROM Game g where g.date < current_date", Game.class);
		List<Game> result = new ArrayList<Game>();
		result = query.getResultList();

		for (Game g : result) {
			System.out.println("ID" + g.getId() + " Date:" + g.getDate() + " Difference" + g.getDifference());
		}
		return result;
	}

	public List<Game> listGames() {
		TypedQuery<Game> query =EntityManagerHelper.em.createQuery("SELECT g FROM Game g", Game.class);
		List<Game> result = new ArrayList<Game>();
		result = query.getResultList();

		for (Game g : result) {
			System.out.println("ID" + g.getId() + " Date:" + g.getDate() + " Difference" + g.getDifference());
			System.out.println("Game players:");
			for (GamePlayer p : g.getGamePlayers()) {
				System.out.println(p.getPlayer().getUsername());
			}
			for (GameLoser gl : g.getGameLosers()) {
				System.out.println(gl.getPlayer().getUsername());
			}
			for (GameWinner gw : g.getGameWinners()) {
				System.out.println(gw.getPlayer().getUsername());
			}
		}
		return result;
	}

	public List<Game> listNextGames() {
		TypedQuery<Game> query = EntityManagerHelper.em.createQuery("SELECT g FROM Game g where g.date > current_date", Game.class);
		List<Game> result = new ArrayList<Game>();
		result = query.getResultList();

		for (Game g : result) {
			System.out.println("ID" + g.getId() + " Date:" + g.getDate() + " Difference" + g.getDifference());
			// for(GamePlayer p:g.getGamePlayers())
			// {
			// System.out.println(p.getPlayer().getUsername());
			// }
			// for(GameLoser gl: g.getGameLosers())
			// {
			// System.out.println(gl.getPlayer().getUsername());
			// }
			// for(GameWinner gw: g.getGameWinners())
			// {
			// System.out.println(gw.getPlayer().getUsername());
			// }
		}
		return result;
	}

	public boolean playGame(Game game, Player player) {
		System.out.println("GameDataAccess.playGame");
		System.out.println("Game to play"+game.toString());
		System.out.println("Player: "+player.toString());
		
		Player play =EntityManagerHelper.em.find(Player.class, player.getId());
		System.out.println("Player ID:"+play.getId());
		Game findGame=EntityManagerHelper.em.find(Game.class, game.getId());
		System.out.println("Game ID:"+findGame.getId());
		
		GamePlayer gp=new GamePlayer();
		gp.setGame(findGame);
		gp.setPlayer(player);
		
		game.addGamePlayer(gp);
		player.addGamePlayer(gp);

		EntityManagerHelper.em.persist(gp);
		EntityManagerHelper.em.persist(findGame);
		EntityManagerHelper.em.persist(play);
		
		EntityManagerHelper.em.getTransaction().commit();
		System.out.println("Done!");
        //return play;
//		TypedQuery<Game> query = em.createQuery("SELECT g FROM Game g where g.date > current_date", Game.class);
//		List<Game> result = new ArrayList<Game>();
//		result = query.getResultList();
//
//		for (Game g : result) {
//			System.out.println("ID" + g.getId() + " Date:" + g.getDate() + " Difference" + g.getDifference());
			// for(GamePlayer p:g.getGamePlayers())
			// {
			// System.out.println(p.getPlayer().getUsername());
			// }
			// for(GameLoser gl: g.getGameLosers())
			// {
			// System.out.println(gl.getPlayer().getUsername());
			// }
			// for(GameWinner gw: g.getGameWinners())
			// {
			// System.out.println(gw.getPlayer().getUsername());
			// }
		//}
		return true;
	}
	
//	public static void main(String[] args) {
//		GameDataAccess gda = new GameDataAccess();
//		gda.listNextGames();
//	}

}
